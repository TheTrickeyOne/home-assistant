blueprint:
  name: Temperature Aggregation Sensor
  description: Creates a template sensor that calculates the average or median temperature from multiple sensors
  domain: template
  source_url: https://github.com/TheTrickeyOne/home-assistant/blob/main/ha-blueprints/temperature-aggregation/temperature_aggregation.yaml
  input:
    name:
      name: Sensor Name
      description: Name for the aggregated temperature sensor
      default: Average Temperature
    calculation_type:
      name: Calculation Type
      description: Choose between average (mean) or median calculation
      selector:
        select:
          options:
            - "average"
            - "median"
      default: "average"
    temperature_sensors:
      name: Temperature Sensors
      description: Select the temperature sensors to aggregate
      selector:
        entity:
          domain: sensor
          multiple: true
    unit_of_measurement:
      name: Unit of Measurement
      description: The unit of measurement for the new sensor (°C, °F, etc.)
      default: "°C"
    decimals:
      name: Decimal Places
      description: Number of decimal places to round to
      default: 1

template:
  - sensor:
      - name: "{{ input.name }}"
        unit_of_measurement: "{{ input.unit_of_measurement }}"
        state_class: measurement
        device_class: temperature
        state: >
          {% set sensors = input.temperature_sensors %}
          {% set values = namespace(list=[]) %}
          
          {% for sensor in sensors %}
            {% if states(sensor) not in ['unknown', 'unavailable'] and states(sensor) | float(0) != 0 %}
              {% set values.list = values.list + [states(sensor) | float] %}
            {% endif %}
          {% endfor %}
          
          {% if values.list | length > 0 %}
            {% if input.calculation_type == 'average' %}
              {{ (values.list | sum / values.list | length) | round(input.decimals) }}
            {% else %}
              {% set sorted = values.list | sort %}
              {% set middle = (values.list | length - 1) / 2 %}
              {% if middle | int == middle %}
                {{ sorted[middle | int] | round(input.decimals) }}
              {% else %}
                {{ ((sorted[middle | int] + sorted[middle | int + 1]) / 2) | round(input.decimals) }}
              {% endif %}
            {% endif %}
          {% else %}
            unknown
          {% endif %}
